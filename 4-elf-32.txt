#include <elf.h>

**********************************************************************


Базовые типы
Для каждой N-битной архитектуры используются следующие типы (N=32,64; ElfN может быть Elf32 или Elf64; uintN_t может быть uint32_t или uint64_t):


ElfN_Addr       Беззнаковый адрес программы, uintN_t
ElfN_Off        Беззнаковое смещение в файле, uintN_t
ElfN_Section    Беззнаковый индекс раздела, uint16_t
ElfN_Versym     Беззнаковые данные о версии символа, uint16_t
Elf_Byte        unsigned char
ElfN_Half       uint16_t
ElfN_Sword      int32_t
ElfN_Word       uint32_t
ElfN_Sxword     int64_t
ElfN_Xword      uint64_t
(Замечание: В *BSD используется немного другая терминология. Так, Elf64_Half — удвоенный Elf32_Half, а Elf64Quarter — uint16_t. Чтобы не путаться, далее эти типы заменены на их явные типы.)

Все структуры данных этого формата файлов следуют «естественному» размеру и принципам выравнивания соответствующего класса. Если требуется, структуры данных содержат явно указанные заполнители (padding) для выравнивания по 4-м байтам для 4-байтовых объектов, для доведения размера структур до кратного 4-м и т. д.

Заголовок ELF (Ehdr)
Заголовок ELF описывается типом Elf32_Ehdr или Elf64_Ehdr:


#define EI_NIDENT 16
typedef struct {
    unsigned char e_ident[EI_NIDENT];
    uint16_t      e_type;
    uint16_t      e_machine;
    uint32_t      e_version;
    ElfN_Addr     e_entry;
    ElfN_Off      e_phoff;
    ElfN_Off      e_shoff;
    uint32_t      e_flags;
    uint16_t      e_ehsize;
    uint16_t      e_phentsize;
    uint16_t      e_phnum;
    uint16_t      e_shentsize;
    uint16_t      e_shnum;
    uint16_t      e_shstrndx;
} ElfN_Ehdr;


**********************************************************************


